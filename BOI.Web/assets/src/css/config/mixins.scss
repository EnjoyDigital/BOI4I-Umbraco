/* convert to em from px */
@function em($px, $base: $base-font-size) {
  @return ($px / $base) * 1em;
}

/* convert to rem from px */
@function calculateRem($px, $base: $base-font-size) {
  $remSize: $px / $base;
  @return #{$remSize}rem;
}

/* unit conversion used by font size */
@function meta-unit($number, $unit) {

  @if $unit == "px" {
    @return $number+px;
  }
  @if $unit == "%" {
    @return $number+"%";
  }
  @if $unit == "em" {
    @return em($number)+px;
  }
  @if $unit == "rem" {
    @return calculateRem($number);
  }
}

/* media query mixins that use breakpoints set in constants.scss */
@mixin media($max, $min: "") {

  @if ( $min == "" ) {
    @media screen and (max-width: #{$max} ){
      @content;
    }
  } @else {
    @media screen and (max-width: #{$max} ) and (min-width: #{$min}) {
      @content;
    }
  }
}

@mixin media-min($min) {
  @media screen and (min-width: #{$min + 1} ){
    @content;
  }
}

@mixin placeholder-styles() {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder { /* Firefox 18- */
    @content;
  }

  &::-moz-placeholder {  /* Firefox 19+ */
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin font-size($size, $line-height: ($size + 8)) {
  font-size: $size + px;
  font-size: meta-unit($size,rem);
  line-height: meta-unit($line-height,px);
  line-height: meta-unit($line-height,rem);
}

/* Fluid sizes - in pixels */
@function fluid($min, $max, $minWidth: 420, $maxWidth: 1400) {
  $minRem: $min / $base-font-size;
  $maxRem: $max / $base-font-size;
  $minWidthRem: $minWidth / $base-font-size;
  $maxWidthRem: $maxWidth / $base-font-size;

  $slope: ($maxRem - $minRem) / ($maxWidthRem - $minWidthRem);
  $yAxisIntersection: -$minWidthRem * $slope + $minRem;

  $clampMin: $minRem + rem;
  $clampValOne: $yAxisIntersection + rem;
  $clampValTwo: ($slope * 100) + vw;
  $clampMax: $maxRem + rem;

  @return clamp(#{$clampMin}, #{$clampValOne} + #{$clampValTwo}, #{$clampMax});
}

@mixin vertical-gradient($start,$end) {
  background: $end;
  background: -webkit-linear-gradient($start,$end);
  background: linear-gradient($start,$end);
}

@mixin hide-text() {
  text-indent: 110%;
  white-space: nowrap;
  overflow: hidden;
}

@mixin cf() {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0;
}

// Last child no margin-bottom
@mixin last-child-no-bottom() {
  > * {
    &:last-child {
      margin-bottom: 0;
    }
  }
}

// Cancel Transitions
@mixin cancel-transitions() {
  -webkit-transition: none !important;
  -moz-transition:    none !important;
  -ms-transition:     none !important;
  -o-transition:      none !important;
  transition:     none !important;
}

/* Slightly lighten a color
 * @access public
 * @param {Color} $color - color to tint
 * @param {Number} $percentage - percentage of `$color` in returned color
 * @return {Color}
 */
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/* Slightly darken a color
 * @access public
 * @param {Color} $color - color to shade
 * @param {Number} $percentage - percentage of `$color` in returned color
 * @return {Color}
 */
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

@mixin link-style() {
  position: relative; // in case this isn't already applied to the element
  text-decoration: none;

  &:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background-color: $white;
    transform: scaleX(0);
    transform-origin: 0 0;
    transition: transform 0.25s ease, background-color 0.25s ease;
  }

  &:hover {
    &:after {
      transform: scaleX(1);
    }
  }
}

@mixin link-style-button-hover() {
  &:hover {
    > span {
      &:after {
        transform: scaleX(1);
      }
    }
  }
}

@mixin link-style-fill-bar($colour: rgba($white,0.5), $hover-color: $white) {
  position: relative; // in case this isn't already applied to the element
  text-decoration: none;
  padding-bottom: 2px;
  background-image: linear-gradient(90deg, $hover-color, $hover-color), linear-gradient(90deg, $colour, $colour);
  background-position: 0% 100%;
  background-repeat: no-repeat;
  background-size: 0% 1px, 100% 1px;
  transition: all 0.25s ease;

  &:hover {
    background-size: 100% 1px, 100% 1px;
  }
}

@mixin link-style-button-hover() {
  &:hover {
    > span {
      &:after {
        transform: scaleX(1);
      }
    }
  }
}

@mixin simple-link-style() {
  text-decoration: underline;
  text-underline-position: under;
  text-underline-offset: 1px;
  transition: text-decoration-color 0.25s ease;

  &:hover {
    text-decoration-color: transparent;
  }
}

@mixin button {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  height: 50px;
  padding: 0 #{fluid(16, 32)};
  font-size: 16px;
  line-height: 24px;
  font-weight: 600;
  color: $white;
  border-radius: 8px;
  box-shadow: rgba(0, 0, 0, 0.24) 0px 2px 2px;
  text-decoration: none;
  transition: color 0.15s ease;

  &::before,
  &::after {
    content: '';
    position: absolute;
    left: 0;
    width: 100%;
    box-sizing: border-box;
  }

  &::before {
    top: 0;
    height: 45px;
    background-color: $blue;
    border-radius: 8px;
    z-index: 1;
    transition: transform 0.15s ease, background-color 0.15s ease;
  }

  &::after {
    bottom: 0;
    height: 10px;
    background-color: $dark-blue;
    border-radius: 0 0 8px 8px;
  }

  > * {
    position: relative;
    top: -2px;
    z-index: 1;
    transition: transform 0.15s ease;
  }

  .icon {
    color: $white;
    fill: $white;
    transition: transform 0.15s ease, color 0.15s ease, fill 0.15s ease;
  }

  &:hover {
    &:not(.disabled):not([disabled]) {
      color: $grey-11;

      &::before {
        background-color: $blue-2;
        transform: translateY(1px);
      }

      > * {
        transform: translateY(1px);
        color: $grey-11;
      }

      .icon {
        fill: $grey-11;
      }
    }
  }

  &.disabled,
  &[disabled],
  &[data-disabled] {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

@mixin button--secondary {
  @include button;

  color: $blue;

  &::before {
    height: 47px;
    background-color: $white;
    border: 2px solid $blue;
    transition: transform 0.15s ease, background-color 0.15s ease, border-color 0.15s ease;
  }
  
  &::after {
    background-color: $blue;
  }

  .icon {
    color: $blue;
    fill: $blue;
  }

  &:hover {
    &:not(.disabled):not([disabled]) {
      color: $blue-2;

      &::before {
        background-color: $grey-11;
        border-color: $blue-2;
      }

      &::after {
        background-color: $blue-2;
      }

      > * {
        transform: translateY(1px);
        color: $blue-2;
      }

      .icon {
        fill: $blue-2;
      }
    }
  }
}
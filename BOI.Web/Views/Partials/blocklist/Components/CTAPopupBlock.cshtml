@inherits UmbracoViewPage<CTapopupBlock>
@{
    if ((Model?.PopupBlocks.NullOrEmpty()).GetValueOrDefault())
    {
        return;
    }
}


    <section class="cta-popup-links">
        <h3 class="-blue-text">@Model.PopupTitle</h3>

        @foreach (var popupBlock in Model.PopupBlocks)
        {
            switch (popupBlock.Content.ContentType.Alias)
            {
                case CTapopupBlockItem.ModelTypeAlias:
                    var popupBlockItem = (CTapopupBlockItem)popupBlock.Content;
                if (popupBlockItem == null)
                {
                    continue;
                }
                var uniqueId = @Guid.NewGuid();

                    <a class="button popup-open" href="#" data-popupid="@uniqueId">
                        <span>@popupBlockItem.PopupName</span>
                    </a>

                    <div class="cta-popup" id="@uniqueId">
                        <div class="cta-popup__inner">
                            <div class="cta-popup__text">
                                <div class="cta-popup__header">
                                    <h2 class="cta-popup__header-title">@popupBlockItem.Title</h2>
                                    <button class="transparent popup-close" title="Close">
                                        <svg class="[ icon icon-close -blue ]" aria-hidden="true">
                                            <use xlink:href="#sprite-icon-close"></use>
                                        </svg>
                                    </button>
                                </div>
                                <div class="rich-text">
                                    @Html.Raw(popupBlockItem.Description)
                                </div>
                            </div>
                            <div class="cta-popup__footer">
                                @if (popupBlockItem.ConfirmationText.HasValue())
                                {
                                    <div class="checkbox-wrapper">
                                        <input id="@uniqueId-check" type="checkbox" />
                                        <label for="@uniqueId-check">@popupBlockItem.ConfirmationText</label>
                                        <div id="@uniqueId-error" class="field-validation-error">
                                            @popupBlockItem.ConfirmationErrorMessage
                                        </div>
                                    </div>
                                }
                                @if (popupBlockItem.CTalink != null)
                                {
                                    <a href="@popupBlockItem.CTalink.Url" class="button continue" @(!string.IsNullOrWhiteSpace(popupBlockItem.CTalink.Target) ? "target=" + popupBlockItem.CTalink.Target + "" : string.Empty) disabled="disabled">
                                        <span>Continue</span>
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                    break;
                case CTapopupLinkItem.ModelTypeAlias:
                    var popupLinkItem = (CTapopupLinkItem)popupBlock.Content;
                if (popupLinkItem == null)
                {
                    continue;
                }
                    <a class="button" href="@popupLinkItem.CTapopupLink.Url" @(!string.IsNullOrWhiteSpace(popupLinkItem.CTapopupLink.Target) ? "target=" + popupLinkItem.CTapopupLink.Target + "" : string.Empty)>
                        <span>@popupLinkItem.CTapopupLink.Name</span>
                    </a>
                    break;
            }
        }
    </section>


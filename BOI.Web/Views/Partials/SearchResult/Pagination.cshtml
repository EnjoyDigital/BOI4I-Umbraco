@using BOI.Core.Search.Constants
@using BOI.Core.Search.Models
@model BOI.Core.Search.Models.Page<IPagedResult>
<div class="pagination">
    <ul>
        @if (!Model.IsFirstPage)
        {
            <li><a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, 1)" class="pagination-button pagination-button--start">Go to first page</a></li>
            <li><a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, Model.CurrentPage - 1)" class="pagination-button pagination-button--prev">Go to previous page</a></li>
        }


        @{
            if (Model.HasPages)
            {
                if (Model.PageCount > Model.Limit)
                {
                    if (Model.CurrentPage >= Model.Limit && Model.CurrentPage < (Model.PageCount - Model.Limit))
                    {

                        <li><span>...</span></li>

                        for (int i = Model.CurrentPage - 1; i < Model.CurrentPage + 2; i++)
                        {
                            <li>
                                <a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, i)"  title="go to page @i" class="@(i == Model.CurrentPage ? "active" : "")" >@i</a>
                            </li>

                        }

                        <li><span>...</span></li>
                    }
                    else if (Model.CurrentPage < Model.Limit)
                    {
                        for (int i = 1; i <= Model.Limit; i++)
                        {
                            if (i != Model.PageCount)
                            {
                                <li>
                                    <a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, i)"  title="go to page @i" class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                                </li>
                            }

                        }
                        <li><span>...</span></li>
                    }
                    else if (Model.CurrentPage >= (Model.PageCount - Model.Limit))
                    {

                        <li><span>...</span></li>

                        for (int i = Model.PageCount - Model.Limit; i <= Model.PageCount; i++)
                        {
                            //var activeClass = (Model.CurrentPage == i) ? Model.ActiveClass : "";
                            //var pathAndQuery = (i == 1) ? wrapper.RemoveQuerystringKey(BaseQueryAliases.Page) : wrapper.SetQuerystringKey(BaseQueryAliases.Page, i, true);

                            if (i != 1)
                            {
                                <li>
                                    <a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, i)" title="go to page @i" class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                                </li>
                            }
                        }
                    }
                }
                else
                {
                    for (int i = 1; i <= Model.PageCount; i++)
                    {
                        //var activeClass = (Model.CurrentPage == i) ? Model.ActiveClass : "";
                        //var pathAndQuery = (i == 1) ? wrapper.RemoveQuerystringKey(BaseQueryAliases.Page) : wrapper.SetQuerystringKey(BaseQueryAliases.Page, i, true);

                        <li>
                            <a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, i)"  title="go to page @i" class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                        </li>
                    }
                }
            }



        }

       @*  @foreach (var pagelink in Model.Links)
        {
            if (pagelink.Page.Equals(0))
            {
                <li><span>...</span></li>
            }
            else
            {
                <li>
                    <a href="@pagelink.Href" title="go to page @pagelink.Text" class="@(pagelink.Text == Model.CurrentPage.ToString() ? "active" : "")">@pagelink.Text</a>
                </li>
            }
        } *@

        @if (!Model.IsLastPage)
        {
            <li><a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, Model.CurrentPage + 1)" class="pagination-button pagination-button--next">Go to next page</a></li>
            <li><a href="@Html.SetQueryString(ViewContext.HttpContext,BaseQueryAliases.Page, Model.PageCount)"  class="pagination-button pagination-button--end">Go to last page</a></li>
        }
    </ul>
</div>
